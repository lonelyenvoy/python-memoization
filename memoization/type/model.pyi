from typing import TypeVar, Callable, Any, Protocol, Union, List, Tuple, Dict, Optional, Iterable

from memoization.model import CacheInfo

T = TypeVar('T', bound=Callable[..., Any])


class CachedFunction(Protocol[T]):
    __call__: T
    __wrapped__: T
    def cache_clear(self) -> None: ...
    def cache_info(self) -> CacheInfo: ...
    def cache_is_empty(self) -> bool: ...
    def cache_is_full(self) -> bool: ...
    def cache_contains_argument(self, function_arguments: Union[List, Tuple, Dict[str, Any]], alive_only: bool = ...) -> bool: ...
    def cache_contains_result(self, return_value: Any, alive_only: bool = ...) -> bool: ...
    def cache_for_each(self, consumer: Callable[[Tuple[Tuple, Dict], Any, bool], None]) -> None: ...
    def cache_arguments(self) -> Iterable[Tuple[Tuple, Dict]]: ...
    def cache_results(self) -> Iterable[Any]: ...
    def cache_remove_if(self, predicate: Callable[[Tuple[Tuple, Dict], Any, bool], bool]) -> bool: ...
